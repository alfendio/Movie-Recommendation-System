# -*- coding: utf-8 -*-
"""main2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QeClDrK-dF0ftxISh5ehcrmTXFvsQFD1

# Movie Recommendation using Collaborative Filtering

# Alfendio Alif Faudisyah

# Import Library
"""

import pandas as pd
import numpy as np 

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

import matplotlib.pyplot as plt

"""# Data Understanding
Tahap awal proyek untuk memahami data yang dimiliki.
"""

movies = pd.read_csv('ml-latest-small/movies.csv')
ratings = pd.read_csv('ml-latest-small/ratings.csv')

print('Data movies : ', len(movies.movieId.unique()))
print('Data ratings : ', len(ratings.userId.unique()))

ratings.info()

ratings.describe()

ratings.head()

"""Cek missing value."""

ratings.isnull().sum()

"""# Data Preparation

Mengubah userID menjadi list tanpa nilai yang sama
"""

user_ids = ratings["userId"].unique().tolist()
print('list userID: ', user_ids)

"""Melakukan encoding userID"""

user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded userID : ', user_to_user_encoded)

"""Melakukan proses encoding angka ke ke userID"""

user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke userID: ', user_encoded_to_user)

"""Mengubah movieID menjadi list tanpa nilai yang sama"""

movie_ids = ratings["movieId"].unique().tolist()

"""Melakukan proses encoding movieID"""

movie_to_movie_encoded = {x: i for i, x in enumerate(movie_ids)}

"""Melakukan proses encoding angka ke movieID"""

movie_encoded_to_movie = {i: x for i, x in enumerate(movie_ids)}

"""## Petakan userID dan movieID ke dataframe yang berkaitan

Mapping userID ke dataframe user
"""

ratings["user"] = ratings["userId"].map(user_to_user_encoded)

"""Mapping movieID ke dataframe movie"""

ratings["movie"] = ratings["movieId"].map(movie_to_movie_encoded)

"""## Cek beberapa hal dalam data seperti jumlah user, jumlah movie, dan mengubah nilai rating menjadi float

Mendapatkan jumlah user
"""

num_users = len(user_to_user_encoded)
print('Jumlah user : ', num_users)

"""Mendapatkan jumlah movie"""

num_movies = len(movie_encoded_to_movie)
print('Jumlah movie : ', num_movies)

"""Mengubah rating menjadi nilai float"""

ratings["rating"] = ratings["rating"].values.astype(np.float32)

"""Nilai minimum rating"""

min_rating = min(ratings["rating"])
print('rating minimum : ', min_rating)

"""Nilai maksimal rating"""

max_rating = max(ratings["rating"])
print('rating maksimum : ', max_rating)

"""## Mengacak data agar distribusinya menjadi random"""

ratings = ratings.sample(frac=1, random_state=42)
ratings

"""# Split Dataset

Bagi data train dan validasi dengan komposisi 90:10. Namun sebelumnya, perlu memetakan (mapping) data user dan movie menjadi satu value terlebih dahulu. Lalu buat rating dalam skala 0 sampai 1 agar mudah dalam melakukan proses training.
"""

# Membuat variabel x untuk mencocokkan data user dan movie menjadi satu value
x = ratings[["user", "movie"]].values

# Membuat variabel y untuk membuat rating dari hasil 
y = ratings["rating"].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

# Membagi menjadi 90% data train dan 10% data validasi
train_indices = int(0.9 * ratings.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:],
)

print(x, y)

"""# Model Development
Dengan Collaborative Filtering sistem merekomendasikan sejumlah movie berdasarkan rating yang telah diberikan sebelumnya. Dari data rating pengguna, akan dilakukan identifikasi movie yang mirip dan belum pernah ditonton oleh pengguna untuk direkomendasikan.

Model menghitung skor kecocokan antara pengguna dan movies dengan teknik embedding. Pertama, lakukan proses embedding terhadap data user dan movies. Selanjutnya, lakukan operasi perkalian dot product antara embedding user dan movies. Selain itu, juga dapat menambahkan bias untuk setiap user dan movies. Skor kecocokan ditetapkan dalam skala [0,1] dengan fungsi aktivasi sigmoid.

## Membuat class RecommenderNet dengan keras Model class
"""

class RecommenderNet(tf.keras.Model):
 
  # Insialisasi fungsi
  def __init__(self, num_users, num_movies, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_movies = num_movies
    self.embedding_size = embedding_size

    # layer embedding user
    self.user_embedding = layers.Embedding( 
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )

    # layer embedding user bias
    self.user_bias = layers.Embedding(num_users, 1) 

    # layer embeddings movies
    self.movies_embedding = layers.Embedding( 
        num_movies,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )

    # layer embedding movies bias
    self.movies_bias = layers.Embedding(num_movies, 1) 
 
  def call(self, inputs):
    # memanggil layer embedding 1
    user_vector = self.user_embedding(inputs[:,0]) 

    # memanggil layer embedding 2
    user_bias = self.user_bias(inputs[:, 0]) 

    # memanggil layer embedding 3
    movies_vector = self.movies_embedding(inputs[:, 1]) 

    # memanggil layer embedding 4
    movies_bias = self.movies_bias(inputs[:, 1]) 
 
    dot_user_movies = tf.tensordot(user_vector, movies_vector, 2) 
 
    x = dot_user_movies + user_bias + movies_bias
    
    # activation sigmoid
    return tf.nn.sigmoid(x)

"""## Model summary"""

model.summary()

"""## Compile Model"""

# inisialisasi model
model = RecommenderNet(num_users, num_movies, 50) 
 
# model compile
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""# Training Model"""

history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 8,
    epochs = 20,
    verbose = 1,
    validation_data = (x_val, y_val)
)

"""## Visualisasi Training
Melihat visualisasi proses training, plot metrik evaluasi dengan matplotlib.
"""

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Dapat dilihat dari visualisasi, nilai sudah bagus untuk digunakan sebagai sistem rekomendasi. Diperoleh nilai RMSE 0.1804 dan val RMSE 0.2003.

# Evaluasi
"""

model.evaluate(x_val, y_val)

"""# Rekomendasi Movie

Ambil sampel user secara acak dan definisikan variabel movie_not_visited yang merupakan daftar movie yang belum pernah ditonton oleh pengguna. Daftar movie_not_visited inilah yang akan menjadi movie yang direkomendasikan.

Rating digunakan untuk membuat rekomendasi movie yang mungkin cocok untuk pengguna. movie yang akan direkomendasikan tentulah movie yang belum pernah ditonton oleh pengguna.
"""

movie_df = pd.read_csv('ml-latest-small/movies.csv')
df = pd.read_csv('ml-latest-small/ratings.csv')

# Mengambil sample user
user_id = df.userId.sample(1).iloc[0]
movies_watched_by_user = df[df.userId == user_id]

# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html 
movies_not_watched = movie_df[
    ~movie_df["movieId"].isin(movies_watched_by_user.movieId.values)
]["movieId"]
movies_not_watched = list(
    set(movies_not_watched).intersection(set(movie_to_movie_encoded.keys()))
)

movies_not_watched = [[movie_to_movie_encoded.get(x)] for x in movies_not_watched]
user_encoder = user_to_user_encoded.get(user_id)
user_movie_array = np.hstack(
    ([[user_encoder]] * len(movies_not_watched), movies_not_watched)
)

"""## Prediksi untuk mendapatkan rekomendasi

Fungsi model.predict() dari library Keras untuk memperoleh rekomendasi movie.
"""

ratings = model.predict(user_movie_array).flatten()
top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_movie_ids = [
    movie_encoded_to_movie.get(movies_not_watched[x][0]) for x in top_ratings_indices
]

print("Showing recommendations for user: {}".format(user_id))
print("====" * 9)
print("Movies with high ratings from user")
print("----" * 8)

top_movies_user = (
    movies_watched_by_user.sort_values(by="rating", ascending=False)
    .head(5)
    .movieId.values
)

movie_df_rows = movie_df[movie_df["movieId"].isin(top_movies_user)]
for row in movie_df_rows.itertuples():
    print(row.title, ":", row.genres)

print("----" * 8)
print("Top 10 movie recommendations")
print("----" * 8)

recommended_movies = movie_df[movie_df["movieId"].isin(recommended_movie_ids)]
for row in recommended_movies.itertuples():
    print(row.title, ":", row.genres)

"""Dari output tersebut, dapat membandingkan antara Movies with high ratings from user dan Top 10 movie recommendation untuk user."""